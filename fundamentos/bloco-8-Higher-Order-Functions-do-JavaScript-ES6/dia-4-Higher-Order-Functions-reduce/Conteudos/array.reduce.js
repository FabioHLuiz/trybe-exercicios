// O reduce √© diferente das outras HOFs: ele recebe dois par√¢metros sendo o primeiro uma callback e o segundo um valor inicial, que √© opcional. Como o pr√≥prio nome diz o reduce busca reduzir um array. Isto √©, iterando em elementos de um array, ao final ele gera um valor √∫nico de qualquer tipo, como, por exemplo, a soma de todos os elementos de tal array. Como principais vantagens do uso do m√©todo reduce podemos destacar:

// escrita de c√≥digo mais limpo;

// maior facilidade ao implementar a l√≥gica com a qual se quer trabalhar;

// melhor manuten√ß√£o de c√≥digo. Veja abaixo a estrutura completa do reduce:


// reduce((accumulator, currentValue, currentIndex, array) => { /* ... */ }, initialValue )

// A callback, que √© o primeiro par√¢metro do reduce, tamb√©m pode receber at√© quatro par√¢metros. Desses quatro par√¢metros apenas dois deles devem existir obrigatoriamente, sendo eles o acc e o curr. Temos ent√£o que acc abreviatura de accumulator ou acumulador, deve obrigatoriamente ser o primeiro par√¢metro da callback e o curr, abreviatura de currentValue ou valor atual tamb√©m obrigat√≥rio, deve ser o segundo par√¢metro da callback. Sendo assim, para trabalhar com uma fun√ß√£o de reduce voc√™ deve ter algo parecido com o c√≥digo abaixo:


// array.reduce((acc, curr) => {
// escopo de execu√ß√£o da fun√ß√£o
// }, valorInicial)

// Lembrando que initialValue ou valorInicial n√£o √© um par√¢metro obrigat√≥rio do reduce e que a callback pode receber at√© quatro par√¢metros, mas aqui vamos abordar os obrigat√≥rios, o acc e o curr.

// O que ent√£o faz o acumulador ou acc? A fun√ß√£o do acumulador √© guardar o retorno da callback, a cada itera√ß√£o, tendo como ponto de partida o valorInicial quando estabelecido. Quando n√£o estabelecido, automaticamente o acc assume o valor do primeiro elemento do array que est√° iterando. Confira o c√≥digo abaixo onde vamos calcular a soma total dos elementos de um array:


// const numbers = [1, 32, 44, 2, 3];
// const iteracoesDoReduce = numbers.reduce((acc, curr) => {
//   console.log(`valor atual √© ${curr}`);

  // Antes da primeira itera√ß√£o o valor de in√≠cio do `acc` √© o valor no index 0 do array, e o valor de in√≠cio de `curr` √© o valor no index 1 do array.

  // Itera√ß√£o 1: valor do acc √© 1 e o de curr √© 32;

  // Ap√≥s a primeira itera√ß√£o, o valor de `acc` muda e passa a acumular agora o resultado do retorno da callback (acc + curr).

  // Itera√ß√£o 2: valor do acc √© 33 e o de curr √© 44;

  // Acontece ent√£o uma segunda itera√ß√£o, e `curr` agora assume o valor do index na sequ√™ncia do array, no caso o valor do segundo index e `acc` segue armazenando os retornos.

  // Itera√ß√£o 3: valor do acc √© 77 e o de curr √© 2;

  // Itera√ß√£o 4: valor do acc √© 79 e o de curr √© 3;

  // Valor final de `acc`√© 82 e `curr` para no 3.


  // return acc +  curr // Ao fim das itera√ß√µes podemos ver que o `acc` armazenou o resultado total do retorno da fun√ß√£o.

  // });

  // console.log(`O resultado final √© ${iteracoesDoReduce}`);

  // por fim, esse console.log imprime o retorno final da nossa fun√ß√£o, 

  // Ao observar o c√≥digo acima identificamos tamb√©m o papel do curr, que sempre armazena o valor do elemento atual, ou seja, o elemento do array que est√° sendo iterado no momento.

  // Passando um valor para o acc

  // Confuso ü§î? Vamos a outro exemplo! Imagine que novamente voc√™ queira somar todos os valores de um array. Mas agora teremos um valor inicial j√° estipulado para o acc. Antes de conhecer o reduce, voc√™ faria algo parecido com o c√≥digo abaixo, correto?

  // const numbers = [1, 32, 44, 2, 3];
  // let sumNumbers = 30;

  // A vari√°vel `sumNumbers` tem um valor inicial de 30 e vai acumulando, a cada itera√ß√£o do for, o resultado da opera√ß√£o feita em seu escopo!

  // for (let index = 0; index < numbers.length; index += 1) {
  //   sumNumbers += numbers[index];
  // }
  // console.log(sumNumbers); // 112

  // Veja o mesmo feito com reduce:

  // const numbers = [1, 32, 44, 2, 3];

  // const totalSum = numbers.reduce((acc, curr) => {
  //   console.log(`valor do acc √© ${acc} e o de curr √© ${curr}`);

  // Itera√ß√£o 1: valor do acc √© 30 e o de curr √© 1
  // Itera√ß√£o 2:valor do acc √© 31 e o de curr √© 32
  // Itera√ß√£o 3: valor do acc √© 63 e o de curr √© 44
  // Itera√ß√£o 4: valor do acc √© 107 e o de curr √© 2
  // Itera√ß√£o 5: valor do acc √© 107 e o de curr √© 3
  // Valor final de `acc`√© 112 e `curr` para no 3


  // return acc + curr;

  // }, 30); // O `valorInicial` √© 30, ou seja, `acc` antes de executar a primeira itera√ß√£o j√° est√° armazenando esse valor.

  // console.log(`valor final do acc √© ${totalSum}`);
  // por fim, esse `console.log` imprime o retorno da nossa fun√ß√£o, que √© o valor final de `acc` ap√≥s cada uma das 5 itera√ß√µes, tendo iniciado com valor 30.

  // Pode parecer estranho definir um valor fixo para o acumulador, mas isso porque estamos trabalhando com n√∫meros. O reduce √© uma ferramenta poderosa e em um c√≥digo mais complexo ele poderia receber um valor din√¢mico, atrav√©s de uma vari√°vel ou at√© mesmo qualquer valor que n√£o seja um n√∫mero. Vale lembrar tamb√©m que voc√™ aprendeu a usar o reduce com seus dois primeiros par√¢metros, mas embora pouco utilizados, existem mais dois par√¢metros opcionais: index e array. Veja exemplos utilizando todos os quatro par√¢metros do reduce acessando sua documenta√ß√£o.

  //   E na pr√°tica, qual a vantagem de se usar o reduce ü§î? Vamos dissecar a diferen√ßa ao usar o for e ao usar o reduce:

  // M√©todo for:

  // Necessidade de criar uma vari√°vel para acumular o resultado de cada itera√ß√£o do for, a soma de cada resultado - let sumNumbers;

  // Necessidade de setar um valor inicial para vari√°vel - sumNumbers = 30;
  // M√©todo .reduce:

  // A fun√ß√£o callback passada por par√¢metro recebe dois par√¢metros, o acumulador acc e o elemento do array de cada itera√ß√£o, curr;

  // Como a fun√ß√£o √© uma arrow function que possui apenas uma linha, o retorno de cada itera√ß√£o ser√°: acc + curr;

  // O retorno √© salvo no primeiro par√¢metro , acc. √â como se voc√™ estivesse fazendo igual √† primeira fun√ß√£o, sumNumbers = sumNumbers + numbers[index], mas nesse caso seria acc = acc + curr;

  // Organizando para simplificar

  // Veja tamb√©m que ao inv√©s de passar a l√≥gica direto dentro da callback do reduce, voc√™ pode criar uma fun√ß√£o externa e cham√°-la como sendo o par√¢metro callback:

  // const numbers = [1, 32, 44, 2, 3];

  // const sumNumbers =  (acc, curr) => acc + curr;

  // const totalSum = numbers.reduce(sumNumbers, 30);

  // console.log(totalSum); //112

  // Dessa maneira seu c√≥digo fica mais organizado e voc√™ poder√° reutilizar a fun√ß√£o sumNumbers caso seja necess√°rio.

  // ‚úçÔ∏è Anote a dica: acc e curr s√£o apenas nomes costumeiros, voc√™ pode dar o nome que quiser para o seu c√≥digo, sendo uma boa op√ß√£o escolher nomes sem√¢nticos, de acordo com o que √© executado pela fun√ß√£o em quest√£o.

  // Outros exemplos de uso do reduce

  // Hora de olhar outro exemplo para fixar e mostrar outras formas de se usar o reduce. Neste exemplo, ser√£o comparados valores para buscar o maior valor em um array. Tente criar essa fun√ß√£o apenas com for e depois tente com reduce. Caso n√£o consiga, olhe a solu√ß√£o abaixo:

  // const numbers = [50, 85, -30, 3, 15];

  // const getBigger = (bigger, number) => ((bigger > number) ? bigger : number);

  // const bigger = numbers.reduce(getBigger, 0);
  // console.log(bigger); // 85

  // O operador condicional (tern√°rio) √© o √∫nico operador JavaScript que possui tr√™s operandos. Este operador √© frequentemente usado como um atalho para a instru√ß√£o if.

  // Sintaxe

  // condition ? expr1 : expr2 = ((bigger > number) ? bigger : number);


  // A fun√ß√£o passada agora pode possuir dois tipos de retorno:

  // O retorno do pr√≥prio acumulador bigger (no caso true do tern√°rio), o que significa que ele n√£o ser√° modificado; ou

  // O valor do elemento do array, number, que indica que possui um valor maior que bigger.

  // Modifique o segundo par√¢metro passado, o 0, no reduce para 100 e execute o programa. O retorno agora √© 100, j√° que nenhum n√∫mero de dentro do array √© maior que o valor inicial passado. Ent√£o veja: a cada itera√ß√£o, o reduce mant√©m o valor do acumulador igual ou o atualiza de acordo com a compara√ß√£o que √© feita. Ao final, voc√™ tem o maior valor do array. Adicione um console.log √† fun√ß√£o do reduce para ver isso acontecendo em detalhes, se quiser!

  // Para fixar ainda mais conceito de reduce, fa√ßa uma fun√ß√£o que some todos os n√∫meros pares do array:

  // const numbers = [18, 19, 23, 53, 4, 5, 76, 23, 54];
  
//   Solu√ß√£o √© est√° a seguir, mas tente realizar a fun√ß√£o sem v√™-la. Tente criar uma usando reduce e filter, e outra apenas usando reduce.

// Solu√ß√£o usando filter e reduce:

// const numbers = [18, 19, 23, 53, 4, 5, 76, 23, 54];

// const getEven = (number) => number % 2 === 0;
// const sumPair = (accumulator, number) => accumulator + number;

// const sumNumbers = (array) => array.filter(getEven).reduce(sumPair); // Olhe que c√≥digo pequeno e conciso!

// console.log(sumNumbers(numbers)); // 152

// Solu√ß√£o usando apenas reduce:

// const numbers = [18, 19, 23, 53, 4, 5, 76, 23, 54];

// const sumPair = (accumulator, number) => (
//   (number % 2 === 0) ? accumulator + number : accumulator
// );

// const sumNumbers = (array) => array.reduce(sumPair, 0);

// console.log(sumNumbers(numbers)); // 152

// (number % 2 === 0) = jeito de capturar os numeros pares

// Sintaxe do operador condicional (tern√°rio):

// condition ? expr1 : expr2:

// (number % 2 === 0) ? accumulator + number : accumulator);
// (condi√ß√£o multi de 2),
// (? = se) = operador condicional (tern√°rio)                    


// O operador condicional (tern√°rio) √© o √∫nico operador JavaScript que possui tr√™s operandos. Este operador √© frequentemente usado como um atalho para a instru√ß√£o if.



// Agora crie uma fun√ß√£o usando os dados dos estudantes que usamos no conte√∫do do dia anterior, para mostrar na tela um relat√≥rio que diz em qual mat√©ria o estudante foi melhor. Voc√™ usar√° tanto o map quanto, dentro dele, o reduce!

const estudantes = [
  {
    nome: 'Jorge',
    sobrenome: 'Silva',
    idade: 14,
    turno: 'Manh√£',
    materias: [
      { name: 'Matem√°tica', nota: 67 },
      { name: 'Portugu√™s', nota: 79 },
      { name: 'Qu√≠mica', nota: 70 },
      { name: 'Biologia', nota: 65 },
    ],
  },
  {
    nome: 'Mario',
    sobrenome: 'Ferreira',
    idade: 15,
    turno: 'Tarde',
    materias: [
      { name: 'Matem√°tica', nota: 59 },
      { name: 'Portugu√™s', nota: 80 },
      { name: 'Qu√≠mica', nota: 78 },
      { name: 'Biologia', nota: 92 },
    ],
  },
  {
    nome: 'Jorge',
    sobrenome: 'Santos',
    idade: 15,
    turno: 'Manh√£',
    materias: [
      { name: 'Matem√°tica', nota: 76 },
      { name: 'Portugu√™s', nota: 90 },
      { name: 'Qu√≠mica', nota: 70 },
      { name: 'Biologia', nota: 80 },
    ],
  },
  {
    nome: 'Maria',
    sobrenome: 'Silveira',
    idade: 14,
    turno: 'Manh√£',
    materias: [
      { name: 'Matem√°tica', nota: 91 },
      { name: 'Portugu√™s', nota: 85 },
      { name: 'Qu√≠mica', nota: 92 },
      { name: 'Biologia', nota: 90 },
    ],
  },
  {
    nome: 'Natalia',
    sobrenome: 'Castro',
    idade: 14,
    turno: 'Manh√£',
    materias: [
      { name: 'Matem√°tica', nota: 70 },
      { name: 'Portugu√™s', nota: 70 },
      { name: 'Qu√≠mica', nota: 60 },
      { name: 'Biologia', nota: 50 },
    ],
  },
  {
    nome: 'Wilson',
    sobrenome: 'Martins',
    idade: 14,
    turno: 'Manh√£',
    materias: [
      { name: 'Matem√°tica', nota: 80 },
      { name: 'Portugu√™s', nota: 82 },
      { name: 'Qu√≠mica', nota: 79 },
      { name: 'Biologia', nota: 75 },
    ],
  },
];

// Resultado esperado:
// [
//   { name: 'Jorge', materia: 'Portugu√™s' },
//   { name: 'Mario', materia: 'Biologia' },
//   { name: 'Jorge', materia: 'Portugu√™s' },
//   { name: 'Maria', materia: 'Qu√≠mica' },
//   { name: 'Natalia', materia: 'Portugu√™s' },
//   { name: 'Wilson', materia: 'Portugu√™s' },
// ]
