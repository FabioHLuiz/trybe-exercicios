// Agora a prÃ¡tica

// Estes exercÃ­cios praticam os conceitos de Higher Order Functions associados a outros jÃ¡ vistos, como arrow functions, template literals, objetos e temas dos fundamentos. Essa mistura de conceitos Ã© muito importante para seu aprendizado, entÃ£o use tudo o que sabe para resolver os exercÃ­cios!

// Utilize o seguinte cÃ³digo como template para realizar os exercÃ­cios:

// const books = [
//   {
//     id: 1,
//     name: 'As CrÃ´nicas de Gelo e Fogo',
//     genre: 'Fantasia',
//     author: {
//       name: 'George R. R. Martin',
//       birthYear: 1948,
//     },
//     releaseYear: 1991,
//   },
//   {
//     id: 2,
//     name: 'O Senhor dos AnÃ©is',
//     genre: 'Fantasia',
//     author: {
//       name: 'J. R. R. Tolkien',
//       birthYear: 1892,
//     },
//     releaseYear: 1954,
//   },
//   {
//     id: 3,
//     name: 'FundaÃ§Ã£o',
//     genre: 'FicÃ§Ã£o CientÃ­fica',
//     author: {
//       name: 'Isaac Asimov',
//       birthYear: 1920,
//     },
//     releaseYear: 1951,
//   },
//   {
//     id: 4,
//     name: 'Duna',
//     genre: 'FicÃ§Ã£o CientÃ­fica',
//     author: {
//       name: 'Frank Herbert',
//       birthYear: 1920,
//     },
//     releaseYear: 1965,
//   },
//   {
//     id: 5,
//     name: 'A Coisa',
//     genre: 'Terror',
//     author: {
//       name: 'Stephen King',
//       birthYear: 1947,
//     },
//     releaseYear: 1986,
//   },
//   {
//     id: 6,
//     name: 'O Chamado de Cthulhu',
//     genre: 'Terror',
//     author: {
//       name: 'H. P. Lovecraft',
//       birthYear: 1890,
//     },
//     releaseYear: 1928,
//   },
// ];

//////////////////////////////////////////////////////////////////////////////////////////////////

// ðŸš€ 1 - Encontre o nome da primeira pessoa autora do livro nascida no ano de 1947.

// Usando a funÃ§Ã£o .find localizamos a primeiro pessoa, usamos a sintaxe abaixo para acessar o array, logo apÃ³s o objeto, e depois o outro objeto ficando assim; (birth.author.birthYear === 1947).author.name;


// const authorBornIn1947 = () => books.find((birth) => birth.author.birthYear === 1947).author.name;

// console.log(authorBornIn1947());

// 2 - Retorne o nome do livro de menor nome.

// Dica: use a funÃ§Ã£o forEach.

// Uma variÃ¡vel do tipo vazia representa para nÃ³s false, entÃ£o usamos a negaÃ§Ã£o da variÃ©vel (!nameBook) entÃ£o (SE) a negaÃ§Ã£o de (!nameBook) acontece eu irei guardar o nome do livro dentro da variÃ¡vel nameBook.

// Usamos o operador lÃ³gico (OU-||) 

// nameBook = book.name = (nameBook recebe= o nome do livro que encontrei) esse passo alimenta minha variÃ¡vel fazendo que ela receba o nome do primeiro, porÃ©m eu nÃ£o quero que ela receba o nome do primeiro livro, eu que ela tambÃ©m seja capaz de guardar o nome do livro que ela encontrou caso o que jÃ¡ esteja dentro tenha menos caracteres ou seja ou quando minha variÃ¡vel estÃ¡ vazia ou quando eu encontro o nome de livro com tamanho de caracteres menor eu vou substituir o nome do livro na minha variÃ¡vel, nessas duas situaÃ§Ãµes irei usar essa linha citada acima, entÃ£o Usamos o operador lÃ³gico (OU-||) 

// EntÃ£o serÃ¡ que o nome que achei no meu objeto Ã© menor que o nome que jÃ¡ estÃ¡ guardado na minha variÃ¡vel nameBook, se for eu irei salvar essa informaÃ§Ã£o dentro de nameBook entÃ£o fica assim o codigo: 

// const smallerName = () => {
//   let nameBook;

//   books.forEach((book) => {
//     if(!nameBook || book.name.length < nameBook.length){
//       nameBook = book.name
//     }
//   })

//   return nameBook;
// };

//////////////////////////////////////////////////////////////////////////////////////////////////

// 3 - Encontre o primeiro livro cujo nome possui 26 caracteres.

// const expectedResult = {
//   id: 1,
//   name: 'As CrÃ´nicas de Gelo e Fogo',
//   genre: 'Fantasia',
//   author: {
//     name: 'George R. R. Martin',
//     birthYear: 1948,
//   },
//   releaseYear: 1991,
// };

// const getNamedBook = () => books.find((word) => word.name.length === 26);
// console.log(getNamedBook());

//////////////////////////////////////////////////////////////////////////////////////////////////

// 4 - Ordene os livros por data de lanÃ§amento em ordem decrescente.

const expectedResult = [
  {
    id: 1,
    name: 'As CrÃ´nicas de Gelo e Fogo',
    genre: 'Fantasia',
    author: { name: 'George R. R. Martin', birthYear: 1948 },
    releaseYear: 1991,
  },
  {
    id: 5,
    name: 'A Coisa',
    genre: 'Terror',
    author: { name: 'Stephen King', birthYear: 1947 },
    releaseYear: 1986,
  },
  {
    id: 4,
    name: 'Duna',
    genre: 'FicÃ§Ã£o CientÃ­fica',
    author: { name: 'Frank Herbert', birthYear: 1920 },
    releaseYear: 1965,
  },
  {
    id: 2,
    name: 'O Senhor dos AnÃ©is',
    genre: 'Fantasia',
    author: { name: 'J. R. R. Tolkien', birthYear: 1892 },
    releaseYear: 1954,
  },
  {
    id: 3,
    name: 'FundaÃ§Ã£o',
    genre: 'FicÃ§Ã£o CientÃ­fica',
    author: { name: 'Isaac Asimov', birthYear: 1920 },
    releaseYear: 1951,
  },
  {
    id: 6,
    name: 'O Chamado de Cthulhu',
    genre: 'Terror',
    author: { name: 'H. P. Lovecraft', birthYear: 1890 },
    releaseYear: 1928,
  },
];

// expectedResult.sort((a, b) => b.releaseYear > a.releaseYear ? 1 : -1);

// console.log(expectedResult );

//////////////////////////////////////////////////////////////////////////////////////////////////

// ðŸš€ 5 - FaÃ§a uma funÃ§Ã£o que retorne true, se todas as pessoas autoras nasceram no sÃ©culo XX, ou false, caso contrÃ¡rio.

// const expectedResult = false;

expectedResult.every((book) => book.author.birthYear >= 1901 && book.author.birthYear <= 2000);

console.log(expectedResult);
