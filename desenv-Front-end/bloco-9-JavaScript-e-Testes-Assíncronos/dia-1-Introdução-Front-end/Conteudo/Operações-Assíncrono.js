// Opera√ß√µes ass√≠ncronas

// Opera√ß√µes em JavaScript s√£o tradicionalmente s√≠ncronas, ou seja, para que uma cadeia de opera√ß√µes seja realizada √© necess√°rio que uma opera√ß√£o termine para que outra comece. Em uma linha de produ√ß√£o de autom√≥veis, por exemplo, v√°rias etapas de produ√ß√£o s√£o codependentes. Podemos relacionar essas etapas de produ√ß√£o √†s opera√ß√µes s√≠ncronas em JavaScript. Observe o exemplo abaixo para que essa analogia fique mais n√≠tida:

console.log('1 - Receber roda');
console.log('2 - Encaixar parafusos');
console.log('3 - Fixar roda no carro');

// Note que existe uma ordem espec√≠fica de etapas que n√£o pode ser quebrada, pois uma afeta diretamente a outra. Sem roda, n√£o adianta encaixar parafusos; sem encaixar parafusos, fixar a roda n√£o √© poss√≠vel.

//////////////////////////////////////////////////////////////////////////////////////////

// Agora, imagine que o nosso estoque de parafusos est√° chegando ao fim, e que √© necess√°rio que fa√ßamos uma reposi√ß√£o para que a linha de produ√ß√£o n√£o pare. No entanto, nossa opera√ß√£o n√£o cobre esse tipo de situa√ß√£o e nossa linha de produ√ß√£o para enquanto uma pessoa funcion√°ria ir√° comprar os parafusos e repor o estoque.

console.log('1 - Comprar parafusos');
console.log('2 - Adicionar ao estoque');
console.log('3 - Receber roda');
console.log('4 - Encaixar parafusos');
console.log('5 - Fixar roda no carro');

// Observe que estamos trabalhando de forma ineficiente e adicionando etapas desnecess√°rias √† nossa produ√ß√£o, pois, se tivermos parafusos suficientes em estoque, n√£o precisaremos parar a montagem para que mais parafusos sejam comprados e repostos. Assim como na nossa linha de produ√ß√£o, existem opera√ß√µes que n√£o t√™m essa codepend√™ncia em JavaScript e com o objetivo de cobrir justamente esse tipo de situa√ß√£o surgem as opera√ß√µes ass√≠ncronas.

//////////////////////////////////////////////////////////////////////////////////////////

// Rode em seu editor o c√≥digo abaixo e veja como nossa linha de produ√ß√£o j√° n√£o depende mais das etapas de compra de parafusos e de reposi√ß√£o do estoque.

// N√£o se preocupe com o c√≥digo em si, falaremos da fun√ß√£o setTimeout logo mais! üòâ

// linhaDeProducao.js

const TWO_SECONDS = 2000;

setTimeout(() => {
  console.log('Comprar parafusos'); // Comprar parafusos
  console.log('Adicionar ao estoque'); // Adicionar ao estoque
}, TWO_SECONDS);

console.log('1 - Receber roda'); // 1 - Receber roda
console.log('2 - Encaixar parafusos'); // 2 - Encaixar parafusos
console.log('3 - Fixar roda no carro'); // 3 - Fixar roda no carro

// Sa√≠da:
// 1 - Receber roda
// 2 - Encaixar parafusos
// 3 - Fixar roda no carro
// Comprar parafusos
// Adicionar ao estoque

// Note que console.log('Comprar parafusos') e console.log('Adicionar ao estoque') foram declarados antes das etapas 1, 2 e 3, e mesmo assim o retorno das chamadas s√≥ ocorre ao final, isso acontece porque utilizamos a fun√ß√£o setTimeout. √â muito comum que essa fun√ß√£o seja utilizada para simular comportamentos ass√≠ncronos.

//////////////////////////////////////////////////////////////////////