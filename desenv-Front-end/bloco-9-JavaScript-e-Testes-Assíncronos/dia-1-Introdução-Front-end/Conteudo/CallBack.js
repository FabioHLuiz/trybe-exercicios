// Callbacks

// Agora que o conceito de assincronicidade est√° mais n√≠tido, √© hora de dar luz √†s callbacks!

// De forma resumida, callback √© uma fun√ß√£o passada como par√¢metro para outra fun√ß√£o. Um exemplo de fun√ß√£o callback √© quando chamamos a fun√ß√£o setTimeout, essa fun√ß√£o recebe dois par√¢metros: o primeiro √© a fun√ß√£o callback, que passamos por meio de uma arrow function; e o segundo √© o tempo (em milissegundos) que o interpretador ir√° esperar para executar a fun√ß√£o. Observe a estrutura dela: setTimeout(1parametro, 2parametro);

// O primeiro par√¢metro √© uma callback sem nome: () => {}.

// O segundo par√¢metro ser√° o tempo de espera: 2000 (2000 milissegundos ou 2 segundos, por exemplo).

// setTimeout(() => {}, 2000);

// Agora, veremos um exemplo pr√°tico de como podemos utilizar fun√ß√µes callback. Copie e analise com calma cada trecho da implementa√ß√£o do c√≥digo, se necess√°rio, volte na explica√ß√£o para que a implementa√ß√£o seja bem compreendida!

// Este exemplo est√° em portugu√™s para facilitar a compreens√£o, os pr√≥ximos estar√£o em ingl√™s, ok?

// despesas.js

const minhasDespesas = [
  {
    academia: 99,
  },
  {
    ifood: 200,
  },
  {
    celular: 60,
  },
  {
    internet: 100,
  },
];

const minhaRenda = 1000;

// Neste primeiro trecho de c√≥digo, temos duas declara√ß√µes de vari√°veis. A primeira delas, minhasDespesas, √© um array de objetos que representa os gastos de uma pessoa no m√™s. A segunda, minhaRenda, representa o quanto essa pessoa recebeu nesse mesmo m√™s.

// Nosso pr√≥ximo passo ser√° implementar uma fun√ß√£o que trate essas informa√ß√µes para que tenhamos como resultado um balan√ßo de entradas e sa√≠das do m√™s.

// despesas.js

// const minhasDespesas = [
//    ...
// ];

// const minhaRenda = 1000;

const despesaMensal = (renda, despesas, callback) => {
  const despesaTotal = callback(despesas);
  const saldoFinal = renda - despesaTotal;

  console.log(`Balan√ßo do m√™s:
    Recebido: R$${renda},00
    Gasto: R$${despesaTotal},00
    Saldo: R$${saldoFinal},00 `);
};

// Neste trecho da implementa√ß√£o, podemos notar que foi adicionada a fun√ß√£o despesaMensal que recebe tr√™s par√¢metros: renda, despesas, e callback. Acredito que voc√™ deva estar pensando: "O que este par√¢metro callback est√° fazendo nesta fun√ß√£o?".

// Como vimos anteriormente, callback √©, basicamente, uma fun√ß√£o passada por par√¢metro para outra fun√ß√£o. Neste exemplo, o par√¢metro callback receber√° uma fun√ß√£o que retornar√° o quanto gastamos no m√™s, ou seja, nossa fun√ß√£o callback ir√° realizar a l√≥gica necess√°ria para somar todos os gastos contidos no array de objetos minhasDespesas e retornar√° esse valor para a constante despesaTotal.

// despesas.js

// const minhasDespesas = [
//    ...
// ];

// const minhaRenda = 1000;

// const despesaMensal = (renda, despesas, callback) => {
//    ...
// };

const somaDespesas = (despesas) => {
  const custoItem = despesas.map((item) => Object.values(item));
  const despesaTotal = custoItem.reduce((acc, curr) => {
    const soma = acc + curr[0];
    // acc √© a sigla para accumulator (acumulador)
    // curr √© a sigla para current_value (valor atual)
    return soma;
  }, 0);
  return despesaTotal;
};

// Por fim, podemos observar a implementa√ß√£o da fun√ß√£o callback, representada pela fun√ß√£o somaDespesas. Essa fun√ß√£o est√° tratando as informa√ß√µes contidas no array de objetos minhasDespesas e retornando o valor total de gastos.

// Em s√≠ntese, o que fizemos foi:

// 1 - Criamos vari√°veis que representam o quanto recebemos no m√™s e o quanto gastamos no m√™s.

// 2 - Implementamos a fun√ß√£o despesaMensal que recebe tr√™s par√¢metros: nossas despesas, nossa renda e a fun√ß√£o callback.

// 3 - Realizamos a implementa√ß√£o da fun√ß√£o callback representada por somaDespesas que recebe nossos gastos mensais e retorna um valor de gastos total.

// 4 - Adicionamos somaDespesas na chamada da fun√ß√£o despesaMensal e como resultado temos o balan√ßo mensal.

// O arquivo completo ficar√° assim:

// despesas.js

// Declaramos nossa vari√°vel de despesas
const minhasDespesas = [
  {
    academia: 99,
  },
  {
    ifood: 200,
  },
  {
    celular: 60,
  },
  {
    internet: 100,
  },
];

// Declaramos nossa renda
const minhaRenda = 1000;

const despesaMensal = (renda, despesas, callback) => {
  // Definimos que a despesa total √© igual ao valor retornado pela fun√ß√£o callback (que √© o par√¢metro da nossa fun√ß√£o)
  // que vai receber nosso par√¢metro/vari√°vel "despesas"
  const despesaTotal = callback(despesas);

  // Definimos nosso saldo final, que √© nossa renda - nossa despesa total
  const saldoFinal = renda - despesaTotal;

  console.log(`Balan√ßo do m√™s:
    Recebido: R$${renda},00
    Gasto: R$${despesaTotal},00
    Saldo: R$${saldoFinal},00 `);
};

// Definimos nossa fun√ß√£o que ser√° passada como par√¢metro
// essa fun√ß√£o recebe o par√¢metro despesas a partir da fun√ß√£o principal despesaMensal
const somaDespesas = (despesas) => {
  // Separamos cada item do nosso array de despesas
  // e fazemos um reduce para somar os valores
  const custoItem = despesas.map((item) => Object.values(item));
  const despesaTotal = custoItem.reduce((acc, curr) => {
    const soma = acc + curr[0];
    // acc √© a sigla para accumulator (acumulador)
    // curr √© a sigla para current_value (valor atual)
    return soma;
  }, 0);
  return despesaTotal;
};

// Executamos a fun√ß√£o principal com as vari√°veis renda, despesas
// e a nossa fun√ß√£o somaDespesas
// callback = somaDespesas
despesaMensal(minhaRenda, minhasDespesas, somaDespesas);

// Sa√≠da:
//  Balan√ßo do m√™s:
//  Recebido: R$1000,00
//  Gasto:    R$459,00
//  Saldo:    R$541,00

// Reparou que voc√™ j√° estava usando callbacks desde a semana de JavaScript com eventListeners? E at√© a semana passada com filter, map e reduce? A fun√ß√£o que voc√™ passa como par√¢metro para cada uma delas √© exemplo de fun√ß√£o callback. üòâ

// Al√©m disso, lembre-se do exemplo da comida mencionado no Por que isso √© importante? O que voc√™ faz quando o pedido da comida chega, que nesse caso √© jantar, corresponde a uma callback.

// Lembre-se: quando definimos uma fun√ß√£o, o par√¢metro pode ter qualquer nome, por√©m, ao fazer a execu√ß√£o/chamada dessa fun√ß√£o, o par√¢metro deve ser um valor definido. No nosso caso, vamos utilizar uma fun√ß√£o como par√¢metro (callback).

// Vamos ver um exemplo de como esse processo acontece:

// callback.js

// Defini√ß√£o da fun√ß√£o userFullName
const userFullName = ({ firstName, lastName }) => `Ol√°! Meu nome √© ${firstName} ${lastName}`;

// Defini√ß√£o da fun√ß√£o getUser
const getUser = (callback) => {
  const user = {
    firstName: 'Ivan',
    lastName: 'Ivanovich',
    nationality: 'Russo',
  };
  // Retornamos nosso par√¢metro, que ser√° uma fun√ß√£o (callback)
  return callback(user);
};

// Chamada/execu√ß√£o da fun√ß√£o getUser, que vai receber como par√¢metro nossa fun√ß√£o userFullName.
console.log(getUser(userFullName));

// Sa√≠da:
// Ol√°! Meu nome √© Ivan Ivanovich

// Vamos ao passo a passo:

// Definimos a fun√ß√£o userFullName;

// Definimos a fun√ß√£o getUser

// Definimos que o par√¢metro que a nossa getUser vai receber se chama "callback".

// Ao executar a fun√ß√£o getUser, passamos a fun√ß√£o userFullName como par√¢metro.

// Ou seja, o par√¢metro "callback" de dentro da nossa getUser √© igual √† fun√ß√£o userFullName. Isso significa que, ao definirmos nossa fun√ß√£o, o par√¢metro √© din√¢mico, ele vai assumir o valor que passarmos no momento em que executarmos a nossa fun√ß√£o.

// Tenha tranquilidade e lembre-se sempre: Nada melhor do que a pr√°tica. E falando nisso... vamos praticar? ;)