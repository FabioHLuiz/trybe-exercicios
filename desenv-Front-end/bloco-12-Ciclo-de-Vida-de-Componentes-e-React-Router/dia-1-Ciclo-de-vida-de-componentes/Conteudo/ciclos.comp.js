// Ciclos dos componentes

// O Ciclo de Vida de um componente React

// Para auxiliar na l√≥gica de sua aplica√ß√£o e evitar o mal uso dos recursos dispon√≠veis, cada componente React possui seu pr√≥prio ciclo de vida.

// Os componentes React, assim como os seres vivos, possuem um ciclo de vida.O ciclo do React √© dividido em 3 etapas.S√£o elas:

// Montagem: quando o componente √© inicializado e inserido no DOM;

// Atualiza√ß√£o: quando as props ou estados do componente s√£o alterados;

// Desmontagem: quando o componente morre üßü‚Äç‚ôÇÔ∏è, sumindo do DOM

// O ciclo de vida √© acess√≠vel por meio de m√©todos nativos dos class components. Como exemplo, pense no render, que √© um m√©todo de renderiza√ß√£o dos class components e que √© chamado toda vez que uma atualiza√ß√£o acontece.Ele possui caracter√≠sticas intr√≠nsecas que permitem adicionar o componente no DOM.Assim como o render, outros m√©todos possuem suas pr√≥prias caracter√≠sticas e objetivos.

// O ciclo de vida e os principais m√©todos funcionam da seguinte maneira:

// Montagem:
// constructor - recebe as props e define o estado;

// render - renderiza o componente, inserindo - o no DOM;

// componentDidMount - dispara uma ou mais a√ß√µes ap√≥s o componente ser inserido no DOM(ideal para requisi√ß√µes);

// Atualiza√ß√£o:

// shouldComponentUpdate - possibilita autorizar ou n√£o o componente a atualizar;

// componentDidUpdate - dispara uma ou mais a√ß√µes ap√≥s o componente ser atualizado;

// Desmontagem:

// componentWillUnmount - dispara uma ou mais a√ß√µes antes de o componente ser desmontado.

// Entendendo quando cada m√©todo √© chamado

// Vamos agora fazer uma simula√ß√£o, para ver na pr√°tica quando cada m√©todo chamado:

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 0
    };
    console.log("construtor");
  }

  componentDidMount() {
    console.log("componentDidMount");
  }

  shouldComponentUpdate(nextProps, nextState) {
    console.log("shouldComponentUpdate");
    return true;
  }

  componentDidUpdate(prevProps, prevState) {
    console.log("componentDidUpdate");
  }

  render() {
    console.log("render");
    return (
      <div>
        <p>Contador</p>
        <button
          onClick={() => this.setState((state) => ({ counter: state.counter + 1 }))}
        >
          Soma
        </button>
        <p>{this.state.counter}</p>
      </div>
    );
  }
}

// Ao executar o c√≥digo acima, sem o clique no bot√£o Soma, aparecer√£o as seguintes mensagens no console do seu browser:

// As mensagens ‚Äòconstructor‚Äô, ‚Äòrender‚Äô e ‚ÄòcomponentDidMount‚Äô s√£o exibidas no console do navegador

// Atente - se para a ordem de chamada dos m√©todos.As mensagens refletem a ordem de execu√ß√£o dos m√©todos de ciclo de vida do componente.

// Os m√©todos shouldComponentUpdate e componentDidUpdate n√£o apareceram no console, pois n√£o houve atualiza√ß√£o.Caso o bot√£o Soma seja clicado, teremos mais mensagens no console:

// As mensagens ‚Äòconstructor‚Äô, ‚Äòrender‚Äô, ‚ÄòcomponentDidMount‚Äô, ‚ÄòshouldComponentUpdate‚Äô, ‚Äòrender‚Äô e ‚ÄòcomponentDidUpdate‚Äô s√£o exibidas no console do navegador

// Note que, durante o processo de atualiza√ß√£o, o m√©todo render √© chamado novamente.Isso acontece porque, quando se atualiza uma props ou estado, o React ‚Äúpede‚Äù que o componente seja renderizado no DOM.Como apresentamos acima, caso seja v√°lido, podemos impedir essa renderiza√ß√£o retornando false com o m√©todo shouldComponentUpdate.

// Podemos tamb√©m, nos m√©todos shouldComponentUpdate e componentDidUpdate, acessar os estados ou props pr√≥ximos e anteriores.Para isso, devemos utilizar os par√¢metros nextProps e nextState no shouldComponentUpdate e prevProps e prevState no componentDidUpdate.Veja um exemplo:

// Antes, vamos alterar os console.log() dos m√©todos citados acima:

shouldComponentUpdate(nextProps, nextState) {
  console.log("shouldComponentUpdate", this.state, nextState);
  return true;
}

componentDidUpdate(prevProps, prevState) {
  console.log("componentDidUpdate", this.state, prevState);
}

// Clicando uma vez no bot√£o Somar, temos:

// Imagem que mostra as mensagens ‚Äòconstructor‚Äô, ‚Äòrender‚Äô, ‚ÄòcomponentDidMount‚Äô, ‚ÄòshouldComponentUpdate‚Äô, ‚ÄòcomponentDidUpdate‚Äô e os estados no console

// Perceba que o estado s√≥ √© de fato atualizado quando chega no m√©todo componentDidUpdate.Por isso, caso seja necess√°rio impedir uma renderiza√ß√£o, voc√™ deve utilizar o m√©todo shouldComponentUpdate, que permite comparar os atuais e pr√≥ximos estados ou props e adicionar a l√≥gica.
