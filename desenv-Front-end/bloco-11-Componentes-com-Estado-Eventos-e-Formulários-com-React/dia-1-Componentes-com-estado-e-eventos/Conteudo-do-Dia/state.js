// Vamos acessar o estado de um componente React! Veja o exemplo abaixo para conhecer a sintaxe:

import React from 'react';
import './App.css';

class App extends React.Component {
  constructor() {
    super();
    // Para definir um estado inicial ao componente, a ser definido

    // no momento em que o componente for colocado na tela, fa√ßa uma atribui√ß√£o

    // de um objeto √† chave `state` do `this`, ou seja, ao `this.state`
    this.state = {
      numeroDeCliques: 0,
    };
    this.handleClick = this.handleClick.bind(this);
  }
  handleClick() {

    // Voc√™ **NUNCA** deve fazer atribui√ß√µes diretamente a `this.state`. Deve,

    // ao inv√©s disso, SEMPRE utilizar a fun√ß√£o `this.setState(novoEstado)` do

    // React

    this.setState({
      numeroDeCliques: 1,
    });
  }
  render() {
    // Para LER o estado, voc√™ pode usar `this.state.chaveDoMeuEstado`
    const { numeroDeCliques } = this.state;
    return (
      <button
        type="button"
        onClick={this.handleClick}
      >
        {numeroDeCliques}
      </button>
    );
  }
}
export default App;

// E muita aten√ß√£o ao que foi dito acima! Voc√™ NUNCA deve atribuir valores ao estado diretamente com this.state.O estado √© atualizado de forma ass√≠ncrona pelo React, para garantir performance, e o React n√£o garante a ordem em que as atualiza√ß√µes ocorrer√£o.Se voc√™ fizer uma atribui√ß√£o direta, ter√° problemas! Fa√ßa - o sempre atrav√©s da fun√ß√£o this.setState(meuNovoObjetoQueRepresentaOEstado).N√ÉO se esque√ßa disso! üòÉ

// Mas se a a atualiza√ß√£o do estado n√£o ocorre em ordem, voc√™s perguntam, ‚Äúcomo eu atualizo meu estado com base no estado anterior ? Se tudo ocorre fora de ordem, como eu sei que uma conta de novoEstado = estadoAtual + 1 n√£o dar√° problemas ?‚Äù

// Pois bem! Lembre - se de que, com Promises, para garantir que algum c√≥digo executasse somente ap√≥s o retorno da Promise, que √© ass√≠ncrona, voc√™ tinha que coloc√° - lo dentro da fun√ß√£o.then.Aqui a l√≥gica √© da mesma natureza:

import React from 'react';
import './App.css';

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      numeroDeCliques: 0,
    };
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    //Passando uma callback √† fun√ß√£o setState, que recebe de par√¢metros
    // o estado anterior e as props do componente, voc√™ garante que as atualiza√ß√µes
    // do estado acontecer√£o uma depois da outra!
    this.setState((estadoAnterior, _props) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1,
    }));
  }

  render() {
    const { numeroDeCliques } = this.state;
    return (
      <button
        type="button"
        onClick={this.handleClick}
      >
        {numeroDeCliques}
      </button>
    );
  }
}

export default App;

// Definindo o estado inicial atrav√©s de Public Class Fields
// At√© agora vimos que podemos definir o estado inicial atrav√©s do constructor.Uma outra maneira de definir o estado inicial de seus componentes √© utilizando a sintaxe Public Class Fields.√â uma forma mais simples e menos verbosa de definirmos nosso estado.Utilizando essa sintaxe, podemos fazer esta declara√ß√£o fora de nosso constructor.Vamos ver nosso exemplo acima com essa sintaxe:

import React from 'react';
import './App.css';

class App extends React.Component {
  constructor() {
    super();
    // Removemos a declara√ß√£o do estado de dentro do construtor
    // this.state = {
    //   numeroDeCliques: 0,
    // };

    this.handleClick = this.handleClick.bind(this);
  }

  // Fazemos a defini√ß√£o do estado utilizando a sintaxe Public Class Field
  state = {
    numeroDeCliques: 0,
  };

  handleClick() {
    this.setState((estadoAnterior, _props) => ({
      numeroDeCliques: estadoAnterior.numeroDeCliques + 1,
    }));
  }

  render() {
    const { numeroDeCliques } = this.state;
    return (
      <button type="button" onClick={this.handleClick}>
        {numeroDeCliques}
      </button>
    );
  }
}

export default App;

// Sinta - se livre para escolher qualquer uma dessas formas para definir seu estado! O importante √© que voc√™ entenda seu funcionamento e sua utiliza√ß√£o.

// üí° Se voc√™ quisesse chamar, no elemento, um evento passando um par√¢metro, voc√™ deveria trocar a sintaxe < button onClick{ this.minhaFuncao } ...> por < button onClick = {() => this.minhaFuncao('meu parametro')}.Basicamente, substitua a fun√ß√£o do evento por uma chamada √† mesma feita via callback! Experimente!