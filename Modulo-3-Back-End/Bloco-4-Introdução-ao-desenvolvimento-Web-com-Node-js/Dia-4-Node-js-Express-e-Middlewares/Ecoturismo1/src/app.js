// Exercicio 1 Parte 1
// Crie um servidor Node.js utilizando o framework Express com a estrutura inicial do app.js e server.js e prepare o ambiente instalando a biblioteca nodemon.
// Primeiro passo: Crie o arquivo app.js. Agora, importe a biblioteca express e chame a fun√ß√£o em uma vari√°vel.
// Segundo passo no server.js
const express = require('express');

// Exercicio 2
// Quinto passo: Importe o arquivo utils/generateToken.js para o app.js e chame a fun√ß√£o em uma vari√°vel chamada token.
const generateToken = require('./utils/generateToken');

// Parte 4
// Quinto passo: Por fim, realiza-se a importa√ß√£o do arquivo middlewares/validateName.js para o app.js e adicionamos o middleware como segundo par√¢metro para o m√©todo post que √© o respons√°vel por criar novas atividades.
const validateName = require('./middlewares/validateName');

// Parte 5
// Quinto passo: Por fim, realiza-se a importa√ß√£o do arquivo middlewares/validatePrice.js para o app.js e adicionamos o middleware como segundo par√¢metro para o m√©todo post que √© o respons√°vel por criar novas atividades.
const validatePrice = require('./middlewares/validatePrice');

// Parte 6
// S√©timo passo: Por fim, realiza-se a importa√ß√£o do arquivo middlewares/validateDescription.js para o app.js e adicionamos o middleware como segundo par√¢metro para o m√©todo post que √© o respons√°vel por criar novas atividades.
const validateDescription = require('./middlewares/validateDescription');

// Parte 7
// Quarto passo: Por fim, realiza-se a importa√ß√£o do arquivo middlewares/validateCreatedAt.js para o app.js e adicionamos o middleware como segundo par√¢metro para o m√©todo post que √© o respons√°vel por criar novas atividades.
const validateCreatedAt = require('./middlewares/validateCreatedAt');

// Parte 8
// Quarto passo: Por fim, realiza-se a importa√ß√£o do arquivo middlewares/validateRating.js para o app.js e adicionamos o middleware como segundo par√¢metro para o m√©todo post que √© o respons√°vel por criar novas atividades.
const validateRating = require('./middlewares/validateRating');

// Parte 9
// Quarto passo: Por fim, realiza-se a importa√ß√£o do arquivo middlewares/validateDifficulty.js para o app.js e adicionamos o middleware como segundo par√¢metro para o m√©todo post que √© o respons√°vel por criar novas atividades.
const validateDifficulty = require('./middlewares/validateDifficulty');

// Exercicio 2
// Quarto passo: Por fim, realiza-se a importa√ß√£o do arquivo middlewares/auth.js para o app.js e adicionamos o middleware como segundo par√¢metro para o m√©todo post que √© o respons√°vel por criar novas atividades.
const auth = require('./middlewares/auth');

const app = express();

// Parte 2
// Adicione um middleware criado pela comunidade que tem como fun√ß√£o interpretar conte√∫do JSON.
// Primeiro passo: Utilize o m√©todo use e use o express.json() como middleware para interpretar os conte√∫dos JSON.
app.use(express.json());

// Parte 3
// Crie um endpoint POST com a rota /activities para adicionar novas atividades. Ela deve:

// Primeiro passo: Utilize o m√©todo post vindo do arquivo app. Ap√≥s isso, adicione a rota /activities como primeiro par√¢metro e como segundo par√¢metro uma callback respons√°vel por lidar com as requisi√ß√µes(_req) e respostas(res) do servidor

// Exercicio 2
// Crie um endpoint POST com a rota /signup para cadastrar pessoas usu√°rias. Ela deve:

// Ter os campos email, password, firstName e phone obrigatoriamente;
// Caso os campos n√£o sejam preenchidos, retornar o status 401 - Unauthorized e uma mensagem (formato json);
// Sugest√£o: { "message": "Campos ausentes!" }.
// Gerar um token aleat√≥rio v√°lido;
// Retornar o status 200 e uma mensagem contendo o token (formato json);
// Sugest√£o: { token: '<token-aleatorio>' }.
// De olho na dicaüëÄ: Para gerar o token voc√™ pode utilizar a fun√ß√£o randomBytes, do m√≥dulo crypto do Node, dessa forma:

// Parte 1
// Primeiro passo:

// Primeiro passo: Utilize o m√©todo post vindo do arquivo app. Ap√≥s isso, adicione a rota /signup como primeiro par√¢metro e como segundo par√¢metro uma callback respons√°vel por lidar com as requisi√ß√µes(_req) e respostas(res) do servidor.

app.post(
  '/signup',
  auth,
  validateDifficulty,
  validateRating,
  validateCreatedAt,
  validateDescription,
  validatePrice,
  validateName,
  (req, res) => {
    // Exercicio 2
    // Segundo passo: Acesse as chaves email, password, firstName e phone usando req.body. Em seguida, aplique uma condicional para verificar se todos os campos existem por meio do m√©todo includes.
    const { email, password, firstName, phone } = req.body;
    if ([email, password, firstName, phone].includes(undefined)) {
      // Exercicio 1
      // Segundo passo: Utilize o m√©todo status enviando o c√≥digo de resposta HTTP 201 com a mensagem informando que a atividade foi cadastrada com sucesso.
      // res.status(201).json({ message: 'Atividade registrada com sucesso!' });

      // Exercicio 2
      // Terceiro passo: Se n√£o existirem, utilizamos o m√©todo status enviando o c√≥digo de resposta HTTP 401 com a mensagem informando que os campos s√£o obrigat√≥rios.
      return res.status(401).json({ message: 'Campos ausentes!' });
    }
    // Exercicio 2
    //   Quinto passo: Importe o arquivo utils/generateToken.js para o app.js e chame a fun√ß√£o em uma vari√°vel chamada token.
    const token = generateToken();
    //  Exercicio 2
    //   Sexto passo: Por fim, utilizamos o m√©todo status enviando o c√≥digo de resposta HTTP 200 com um token aleat√≥rio e v√°lido.
    return res.status(200).json({ token });
  },
);

module.exports = app;

// Exercicio 2
// O quarto passo est√° na pasta generateToken
// Quarto passo: Crie um diret√≥rio utils e dentro crie um arquivo chamado generateToken.js. Agora, vamos adicionar o c√≥digo que √© fornecido como dica
