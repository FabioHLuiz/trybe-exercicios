// Parte 6
// Crie um middleware de validaÃ§Ã£o para a chave description que possui as chaves createdAt, rating e difficulty. Ela deve:

// Primeiro passo: Crie o arquivo validateDescription.js dentro do diretÃ³rio middlewares realizando o module.exports de uma funÃ§Ã£o anÃ´nima com os parÃ¢metros req, res e next

// Segundo passo: Acesse a chave description usando req.body. Em seguida, aplique uma condicional para verificar se o description existe.

// Terceiro passo: Se nÃ£o existir, utilizamos o mÃ©todo status enviando o cÃ³digo de resposta HTTP 400 com a mensagem informando que o campo Ã© obrigatÃ³rio.

// Quarto passo: Agora, adicione outra condicional para verificar a chave description.createdAt existe.Se nÃ£o existir, utilizamos o mÃ©todo status enviando o cÃ³digo de resposta HTTP 400 com a mensagem informando que o campo Ã© obrigatÃ³rio.

//   Quinto passo: Agora, adicione outra condicional para verificar se a chave description.rating existe.Se nÃ£o existir, utilizamos o mÃ©todo status enviando o cÃ³digo de resposta HTTP 400 com a mensagem informando que o campo Ã© obrigatÃ³rio.

// Sexto passo: Agora, adicione outra condicional para verificar se a chave description.difficulty existe. Se nÃ£o existir, utilizamos o mÃ©todo status enviando o cÃ³digo de resposta HTTP 400 com a mensagem informando que o campo Ã© obrigatÃ³rio.

// SÃ©timo passo: Por fim, realiza-se a importaÃ§Ã£o do arquivo middlewares/validateDescription.js para o app.js e adicionamos o middleware como segundo parÃ¢metro para o mÃ©todo post que Ã© o responsÃ¡vel por criar novas atividades.

// Primeiro passo:
module.exports = (req, res, next) => {
  // Segundo passo
  const { description } = req.body;
  if (!description) {
    // Terceiro passo
    return res.status(400).json({ message: 'O campo description Ã© obrigatÃ³rio' });
  }
  // Quarto passo
  if (!description.createdAt) {
    return res.status(400).json({ message: 'O campo createdAt Ã© obrigatÃ³rio' });
  }
  // Quinto passo
  if (!description.rating) {
    return res.status(400).json({ message: 'O campo rating Ã© obrigatÃ³rio' });
  } // Sexto passo
  if (!description.difficulty) {
    return res.status(400).json({ message: 'O campo difficulty Ã© obrigatÃ³rio' });
  }
  next();
};
// SÃ©timo passo estÃ¡ no arquivo app.js

// Alternativa
// De olho na dicaðŸ‘€: O cÃ³digo acima pode ser um problema pela quantidade de linhas dentro do cÃ³digo da funÃ§Ã£o se vocÃª estiver com o ESLint configurado. Para resolver esse problema e ter um cÃ³digo limpo e reaproveitÃ¡vel, vocÃª pode construir uma funÃ§Ã£o dedicada para as validaÃ§Ãµes de todos os campos. Veja o exemplo abaixo:

// const validateDescription = (descriptionValue, res, value) => {
//     if (!descriptionValue) {
//       return res.status(400).json(
//         { message: `O campo ${value} Ã© obrigatÃ³rio` },
//       );
//     }
//   };

//   module.exports = (req, res, next) => {
//     const { description } = req.body;

//     return validateDescription(description, res, 'description')
//       || validateDescription(description.createdAt, res, 'createdAt')
//       || validateDescription(description.rating, res, 'rating')
//       || validateDescription(description.difficulty, res, 'difficulty')
//       || next();
//   };
