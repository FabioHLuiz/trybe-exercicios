// Escrevendo dados em arquivos
// Escrever dados em arquivos √© um processo bem parecido com a leitura de dados! Assim como o m√≥dulo('fs').promises disponibiliza o m√©todo readFile para a leitura, h√° tamb√©m o m√©todo writeFile para a escrita.

//   my - node - project / writeFile.js

const fs = require('fs').promises;

async function main() {
  try {
    await fs.writeFile('./meu-arquivo.txt', 'Meu text√£o');
    console.log('Arquivo escrito com sucesso!');
  } catch (err) {
    console.error(`Erro ao escrever o arquivo: ${err.message}`);
  }
}

main()

// Rode o script com node writeFile.js e repare que o conte√∫do do meu - arquivo.txt foi alterado para ‚ÄúMeu text√£o‚Äù.

// Anota a√≠ üñä: No writeFile, assim como ocorre no readFile, voc√™ pode especificar algumas op√ß√µes na escrita de arquivos passando um terceiro par√¢metro(flag) opcional em seus m√©todos.

// A op√ß√£o flag especifica como o arquivo deve ser aberto e manipulado.O padr√£o √© 'w', que especifica que o arquivo deve ser aberto para escrita.
//   Observa√ß√£o: Se o arquivo n√£o existir, ele √© criado.Caso contr√°rio, √© reescrito, ou seja, tem seu conte√∫do apagado antes de o novo conte√∫do ser escrito.A flag 'wx', por exemplo, funciona como 'w', mas lan√ßa um erro caso o arquivo j√° exista.