// ExercÃ­cio 1
// ðŸš€ Crie um cÃ³digo para calcular o Ã­ndice de massa corporal(IMC) de uma pessoa.

const readline = require('readline-sync');

const imc = (kg, alt) => {
  console.log(`kg: ${kg}, alt: ${alt}`);

  const inMetros = alt / 100;
  const calc = inMetros ** 2; // ** exponeciaÃ§Ã£o = potÃªncia

  const bmi = kg / calc;

  return bmi;
}

// Exercicio 5
const BMI_MAX_AND_MIN = {
  'Underweight': {
    minBMI: 0,
    maxBMI: 18.4,
  },
  'Normal Weight': {
    minBMI: 18.5,
    maxBMI: 24.9,
  },
  'Overweight': {
    minBMI: 25,
    maxBMI: 29.9,
  },
  'Obese Class I': {
    minBMI: 30.0,
    maxBMI: 34.9,
  },
  'Obese Class II': {
    minBMI: 35,
    maxBMI: 39.9,
  },
  'Obese Class III': {
    minBMI: 40,
    maxBMI: 100, // Um valor default mÃ¡ximo qualquer, impossÃ­vel de alcanÃ§ar no imc.
  },
};

const handleBMIResult = (bmi) => {
  const statuses = Object.keys(BMI_MAX_AND_MIN); // ['Underweight', 'Normal Weight', 'Overweight'...]

  const resultFind = statuses.find((status) => {
    const { maxBMI, minBMI } = BMI_MAX_AND_MIN[status]; // acessamos as informaÃ§Ãµes do intervalo da situaÃ§Ã£o iterada

    // caso esteja dentro do intervalo, significa que encontramos a situaÃ§Ã£o apropriada
    return bmi >= minBMI && bmi <= maxBMI;
  });

  return resultFind;
}

const main = () => {

  const kilos = readline.questionFloat('Qual seu peso ? (kg)');
  const altura = readline.questionInt('Qual sua altura ? (cm)');

  const bmi = imc(kilos, altura);
  const bmiResult = handleBMIResult(bmi);

  console.log(`Estado: ${bmiResult}`);
  console.log(`BMI: ${bmi.toFixed(2)}`);  //toFixed 2 casas apÃ³s a virgula
}

main();

// ExercÃ­cio 2
// ðŸš€ Agora, permita que o cÃ³digo seja executado atravÃ©s do comando npm run bmi.

// O novo cÃ³digo criado deve conter o comando que chama o node para executar o arquivo bmi.js.

// Edite o arquivo package.json para adicionar o novo script com a chave bmi e valor node bmi.js:

// "scripts": {
//   "bmi": "node bmi.js"
// },

// ExercÃ­cio 3

// ðŸš€ Chegou a hora de tornar nosso cÃ³digo mais interativo! Vamos adicionar inputs de entrada para quem usar.

// Instale o pacote readline - sync:

// Importe o readline - sync no arquivo bmi.js e substitua os valores das variÃ¡veis weight e height por perguntas Ã  pessoa que executou o script.Utilizaremos o mÃ©todo questionInt do pacote readline - sync:

// ExercÃ­cio 4

// ðŸš€ Agora temos um problema, o peso nÃ£o Ã© um nÃºmero inteiro! Isso quer dizer que precisamos mudar um pouco a forma como solicitamos o input desse dado.

//   Obs.Da forma como estÃ¡, ao inserirmos um valor como 60.99 para o peso, ele Ã© transformado no nÃºmero inteiro 60, comprometendo o resultado.

// Encontre, na documentaÃ§Ã£o do readline - sync, a funÃ§Ã£o questionFloat;

// Altere o cÃ³digo da funÃ§Ã£o main para que em vez de questionInt, passe a utilizar a funÃ§Ã£o questionFloat ao solicitar o peso da pessoa:

// const weight = readline.questionFloat('What\'s your weight? (kg) ');

// ExercÃ­cio 5
// ðŸš€ Vamos sofisticar um pouco mais nosso exercÃ­cio.AlÃ©m de imprimir o IMC na tela, imprima tambÃ©m em qual categoria da tabela abaixo aquele IMC se enquadra:

// Aqui nÃ³s temos a opÃ§Ã£o de fazer uma sÃ©rie de verificaÃ§Ãµes com if, para saber em que situaÃ§Ã£o se encontra o IMC calculado.PorÃ©m, a utilizaÃ§Ã£o de muitos ifs pode aumentar bastante a complexidade ciclomÃ¡tica do cÃ³digo.Sendo assim, resolveremos de outra maneira.Mas, a tÃ­tulo de exemplo, a soluÃ§Ã£o com if seria a inclusÃ£o de um cÃ³digo como esse:

// const BMI_MAX_AND_MIN = {
//   'Underweight': {
//     minBMI: 0,
//     maxBMI: 18.4,
//   },
//   'Normal Weight': {
//     minBMI: 18.5,
//     maxBMI: 24.9,
//   },
//   'Overweight': {
//     minBMI: 25,
//     maxBMI: 29.9,
//   },
//   'Obese Class I': {
//     minBMI: 30.0,
//     maxBMI: 34.9,
//   },
//   'Obese Class II': {
//     minBMI: 35,
//     maxBMI: 39.9,
//   },
//   'Obese Class III': {
//     minBMI: 40,
//     maxBMI: 100, // Um valor default mÃ¡ximo qualquer, impossÃ­vel de alcanÃ§ar no imc.
//   },
// };

// Agora que temos as relaÃ§Ãµes entre as situaÃ§Ãµes e os IMCs mÃ¡ximos / mÃ­nimos mapeadas, podemos verificar para cada chave(situaÃ§Ã£o) do objeto BMI_MAX_AND_MIN, onde o IMC calculado se encontra.Para isto, vamos criar uma funÃ§Ã£o chamada handleBMIResult, na qual primeiramente extrairemos as chaves do objeto BMI_MAX_AND_MIN.Em seguida, iremos iterar no array em que as as chaves sÃ£o listadas e utilizar o find para encontrar a situaÃ§Ã£o cujo intervalo compreenda o IMC Calculado.

// const statuses = Object.keys(BMI_MAX_AND_MIN); // ['Underweight', 'Normal Weight', 'Overweight'...]

// const resultFind = statuses.find((status) => {
//   const { maxBMI, minBMI } = BMI_MAX_AND_MIN[status]; // acessamos as informaÃ§Ãµes do intervalo da situaÃ§Ã£o iterada

  // caso esteja dentro do intervalo, significa que encontramos a situaÃ§Ã£o apropriada
//   return bmi >= minBMI && bmi <= maxBMI;
// });

// return resultFind;
// }

// Para finalizar, executaremos a handleBMIResult e mostraremos o seu resultado na funÃ§Ã£o main, no console.

// const bmiResult = handleBMIResult(bmi);
// console.log(`bmiResult`);